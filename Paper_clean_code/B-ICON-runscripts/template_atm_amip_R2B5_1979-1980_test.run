#! /usr/bin/bash
#=============================================================================

# mistral cpu batch job parameters
# --------------------------------
#SBATCH --account=bd1179

#SBATCH --job-name=exp.JOBNAME.run
#SBATCH --partition=compute
#SBATCH --chdir=/work/bd1179/b309216/icon/ICON-2.6.4/2.6.4/run/
#SBATCH --nodes=12
#SBATCH --threads-per-core=1
#SBATCH --output=/work/bd1179/b309216/icon/ICON-2.6.4/2.6.4/run/Pauline_PPE/PPEPauline_ScriptsToShare/LOG.exp.JOBNAME.run.%j.o
#SBATCH --error=/work/bd1179/b309216/icon/ICON-2.6.4/2.6.4/run/Pauline_PPE/PPEPauline_ScriptsToShare/LOG.exp.JOBNAME.run.%j.err
#SBATCH --exclusive
#SBATCH --time=02:00:00
#=============================================================================
set -x
ulimit -s unlimited
#=============================================================================
#
# ICON run script:
# !ATTENTION! Do not change the format of the following lines.
#             They are evaluated by checksuite scripts.
# created by ./run/make_target_runscript
# target machine is bull_milan
# target use_compiler is intel
# with_mpi=yes
# with_openmp=yes
# memory_model=large
# submit with sbatch
#
#=============================================================================
#
# OpenMP environment variables
# ----------------------------
export OMP_NUM_THREADS=$((${SLURM_JOB_CPUS_PER_NODE%%\(*} / 4 / 1))
export ICON_THREADS=$((${SLURM_JOB_CPUS_PER_NODE%%\(*} / 4 / 1))
export OMP_SCHEDULE=dynamic,1
export OMP_DYNAMIC="false"
export OMP_STACKSIZE=200M
#
# MPI variables
# -------------
no_of_nodes=${SLURM_JOB_NUM_NODES:=1}
mpi_procs_pernode=$((${SLURM_JOB_CPUS_PER_NODE%%\(*} / 1 / OMP_NUM_THREADS))
((mpi_total_procs=no_of_nodes * mpi_procs_pernode))
#
# blocking length
# ---------------
nproma=32
#
#=============================================================================

# load local setting, if existing
# -------------------------------
if [ -a ../setting ]
then
  echo "Load Setting"
  . ../setting
fi

# environment variables for the experiment and the target system
# --------------------------------------------------------------
export EXPNAME="JOBNAME"
export SLURM_DIST_PLANESIZE="8"
export KMP_AFFINITY="granularity=fine,scatter"
export KMP_LIBRARY="turnaround"
export KMP_KMP_SETTINGS="1"
export OMP_WAIT_POLICY="active"
export KMP_WARNINGS="0"
export MKL_ENABLE_INSTRUCTIONS="AVX2"
export MKL_DEBUG_CPU_TYPE="5"
export KMP_LIBRARY="turnaround"
export OMPI_MCA_osc="pt2pt"
export UCX_IB_ADDR_TYPE="ib_global"
export OMPI_MCA_coll="^ml"
export OMPI_MCA_coll_hcoll_enable="1"
export HCOLL_MAIN_IB="mlx5_0:1"
export UCX_NET_DEVICES="mlx5_0:1"
export UCX_TLS="mm,cma,dc_mlx5,dc_x,self"
export UCX_UNIFIED_MODE="y"
export HDF5_USE_FILE_LOCKING="FALSE"
export OMPI_MCA_io="romio321"
export MALLOC_TRIM_THRESHOLD_="-1"
# load profile
# ------------
if [[ -a  /etc/profile ]]
then
	. /etc/profile
fi

#=============================================================================

# directories with absolute paths
# -------------------------------
thisdir=$(pwd)
basedir=${thisdir%/*}
export basedir
icon_data_rootFolder="/pool/data/ICON"

# how to start the icon model
# ---------------------------
export START="srun -l --kill-on-bad-exit=1 --nodes=${SLURM_JOB_NUM_NODES:-1} --distribution=plane --hint=nomultithread --ntasks=$((no_of_nodes * mpi_procs_pernode)) --ntasks-per-node=${mpi_procs_pernode} --cpus-per-task=$((1 * OMP_NUM_THREADS))"
export MODEL="${basedir}/bin/icon"

# how to submit the next job
# --------------------------
submit="sbatch"
job_name="exp.JOBNAME.run"

# cdo for post-processing
# -----------------------
cdo="cdo"
cdo_diff="cdo diffn"

# constants for time calculations
# -------------------------------
second=1                                 # [s] 1 second
minute=60                                # [s] 1 minute
hour=3600                                # [s] 1 hour
day=86400                                # [s] 1 day
month=2592000                            # [s] 30 days
year360=31104000                         # [s] 360 days
year=31556900                            # [s] 1 earth year

# define script functions used in the experiment run script
# ---------------------------------------------------------
. ./add_run_routines

#=============================================================================

ulimit -s 2097152
ulimit -c 0

#--------------------------------------------------------------------------------------------------
#
# AMIP experiment
#
author_list="Monika Esch, Marco Giorgetta, Rene Redler, MPIM"
#
#--------------------------------------------------------------------------------------------------
#
# This file describes an AMIP experiment based on the non-hydrostatic atmosphere and the
# ECHAM physics. The experiment is intialized from IFS analysis files and uses transient
# boundary conditions for:
# - SST and sea ice
# - spectral solar irradiation
# - well mixed greenhouse gases CO2, CH4, N2O, CFCs
# - O3 concentration
# - tropospheric aerosol optical properties
# - stratospheric volcanic aerosol optical properties
#
#--------------------------------------------------------------------------------------------------

# (1) Basic model configuration
# -----------------------------

atmos_gridID="0019"
atmos_refinement="R02B05"

nproma_atm=48

#
#--------------------------------------------------------------------------------------------------
#
# (2) Define the model time stepping
# ----------------------------------

radTimeStep="PT1H"              # radiation time step:    16 time steps per day
atmTimeStep="PT6M"              # atmosphere time step:   96 time steps per day
                                 #                          6 time steps per radTimeStep
#--------------------------------------------------------------------------------------------------

# (3) icon_data_poolFolder

# Variables provided by the scripting mechanism

# EXPNAME                       = name of exp. in 'exp.<name>'
# basedir                       = base directory, where src/, run/ etc exist
# icon_data_poolFolder          = base directory, where grids/, input/ and setup/ exist
# nproma                        = blocking length for array dimensioning and inner loop lengths
#                                 -> deprecated. nproma_atm is used here.

icon_data_poolFolder="${icon_data_rootFolder:-/pool/data/ICON}/grids/public/mpim"

#--------------------------------------------------------------------------------------------------

# (4) Set variables needed by the scripting mechanism
# ---------------------------------------------------

# horizontal grid(s)
# ------------------
atm_grid_name=icon_grid_${atmos_gridID}_${atmos_refinement}_G

atmo_grid_folder=/pool/data/ICON/grids/public/mpim/${atmos_gridID}
atmo_data_InputFolder=${icon_data_poolFolder}/${atmos_gridID}
atmo_dyn_grid=${atm_grid_name}.nc

# start and end date+time
# -----------------------
start_date=${start_date:="1979-01-01T00:00:00Z"}
end_date=${end_date:="1980-01-01T00:00:00Z"}

# restart intervals
# -----------------
checkpoint_interval="P1Y"
restart_interval="P4Y"

# output intervals
# ----------------
atm_output_interval="P1M"
atm_file_interval="P1M"

# namelist files
# --------------
atm_namelist=NAMELIST_${EXPNAME}_atm
jsbach_namelist=NAMELIST_${EXPNAME}_lnd

atmo_namelist=${atm_namelist}
#--------------------------------------------------------------------------------------------------

# (5) Define the model configuration
#-----------------------------------

# JSBACH settings
jsbach_usecase=jsbach_pfts    # jsbach_lite or jsbach_pfts
jsbach_with_lakes=yes
jsbach_with_carbon=no         # yes needs jsbach_pfts usecase

# Some further processing for land configuration
# ----------------------------------------------

llake=$([ "${jsbach_with_lakes:=yes}" == yes ]    && echo .TRUE. || echo .FALSE. )
lcarbon=$([ "${jsbach_with_carbon:=yes}" == yes ] && echo .TRUE. || echo .FALSE. )

if [[ $jsbach_usecase == *pfts* ]]
then
  pft_file_tag="11pfts_"
else
  pft_file_tag=""
fi

#--------------------------------------------------------------------------------------------------

# (6) Output control
# ------------------

# asynchronous diagnostic output processes
# ----------------------------------------

mpi_atm_io_procs=3                 # for atmosphere plus land

# output file selection
# ---------------------

# Note that "mpi_atm_io_procs" must match the number of output files
#
# output_<xyz>=yes : yes --> output files for <xyz>, any other value --> no files for <xyz>

output_atm_vgrid=no                # produces 1 atm file 
output_atm_3d=yes                  # produces 1 atm file 
output_atm_2d=yes                  # produces 1 atm file 
output_phy_3d=no                   # produces 1 atm file
                                   # Note: "yes" increases the output volume significantly!

output_lnd=no                      # produces 1 lnd file

#-----------------------------------------------------------------------------
#
# atmosphere namelist
# -------------------

cat > ${atm_namelist} << EOF
!
&parallel_nml
 nproma            = ${nproma_atm}
 num_io_procs      = ${mpi_atm_io_procs}
/
&grid_nml
 dynamics_grid_filename = "${atmo_dyn_grid}"
/
&run_nml
 num_lev          = 47          ! number of full levels
 modelTimeStep    = "${atmTimeStep}"
 ltestcase        = .FALSE.     ! run testcase
 ldynamics        = .TRUE.      ! dynamics
 ltransport       = .TRUE.      ! transport
 iforcing         = 2           ! 0: none, 1: HS, 2: ECHAM, 3: NWP
 output           = 'nml'
 msg_level        = 12          ! level of details report during integration 
 restart_filename = "${EXPNAME}_restart_atm_<rsttime>.nc"
 activate_sync_timers = .TRUE.
/
&extpar_nml
 itopo            = 1           ! 1: read topography from the grid file
 itype_lwemiss    = 0
/
&initicon_nml
 init_mode        = 2           ! 2: initialize from IFS analysis
 ifs2icon_filename= "ifs2icon.nc"
/
&nonhydrostatic_nml
 ndyn_substeps    = 5           ! dtime/dt_dyn
 damp_height      = 50000.      ! [m]
 rayleigh_coeff   = 0.10
 vwind_offctr     = 0.2
 divdamp_fac      = 0.004
/
&interpol_nml
 rbf_scale_mode_ll = 1
/
&sleve_nml
 min_lay_thckn    = 40.         ! [m]
 top_height       = 83000.      ! [m]
 stretch_fac      = 0.9
 decay_scale_1    = 4000.       ! [m]
 decay_scale_2    = 2500.       ! [m]
 decay_exp        = 1.2
 flat_height      = 16000.      ! [m]
/
&diffusion_nml
/
&transport_nml
 tracer_names     = 'hus','clw','cli'
 ivadv_tracer     =    3 ,   3 ,   3
 itype_hlimit     =    3 ,   4 ,   4
 ihadv_tracer     =   52 ,   2 ,   2
/
&echam_phy_nml
!
! domain 1
! --------
!
! atmospheric phyiscs (""=never)
 echam_phy_config(1)%dt_rad = "${radTimeStep}"
 echam_phy_config(1)%dt_vdf = "${atmTimeStep}"
 echam_phy_config(1)%dt_cnv = "${atmTimeStep}"
 echam_phy_config(1)%dt_cld = "${atmTimeStep}"
 echam_phy_config(1)%dt_gwd = "${atmTimeStep}"
 echam_phy_config(1)%dt_sso = "${atmTimeStep}"
!
! atmospheric chemistry (""=never)
 echam_phy_config(1)%dt_mox = "${atmTimeStep}"
 echam_phy_config(1)%dt_car = ""
 echam_phy_config(1)%dt_art = ""
!
! surface (.TRUE. or .FALSE.)
 echam_phy_config(1)%ljsb   = .TRUE.
 echam_phy_config(1)%lamip  = .TRUE.
 echam_phy_config(1)%lice   = .TRUE.
 echam_phy_config(1)%lmlo   = .FALSE.
 echam_phy_config(1)%llake  = ${llake}
!
! fix negative humidity
 echam_phy_config(1)%iqneg_d2p = 0
 echam_phy_config(1)%iqneg_p2d = 0
/
&echam_rad_nml
!
! domain 1
! --------
!
 echam_rad_config(1)%isolrad    =  1
 echam_rad_config(1)%irad_h2o   =  1
 echam_rad_config(1)%irad_co2   =  4
 echam_rad_config(1)%irad_ch4   =  4
 echam_rad_config(1)%irad_n2o   =  4
 echam_rad_config(1)%irad_o3    =  8
 echam_rad_config(1)%irad_o2    =  2
 echam_rad_config(1)%irad_cfc11 =  4
 echam_rad_config(1)%irad_cfc12 =  4
 echam_rad_config(1)%irad_aero  = 18
/
&echam_gwd_nml
/
&echam_sso_nml
/
&echam_vdf_nml
 echam_vdf_config(1)%pr0 = PrPrPr !
/
&echam_cnv_nml
 echam_cnv_config(1)%entrmid  = EmidEmidEmid !
 echam_cnv_config(1)%entrpen  = EpenEpenEpen !
 echam_cnv_config(1)%entrdd   = EddEddEdd !
 echam_cnv_config(1)%cmftau   = TaumfTaumfTaumf   !
/
&echam_cld_nml
/
&echam_cop_nml
/
&echam_cov_nml
 echam_cov_config(1)%crt = R0topR0topR0top !
/
&sea_ice_nml
/
EOF

# jsbach namelist
# ---------------

cat > ${jsbach_namelist} << EOF
&jsb_model_nml
  usecase              = "${jsbach_usecase}"
  use_lakes            = ${llake}
  fract_filename       = "bc_land_frac.nc"
  output_tiles         = ${output_tiles}     ! List of tiles to output
/
&jsb_seb_nml
  bc_filename          = 'bc_land_phys.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_rad_nml
  use_alb_veg_simple   = .FALSE.          ! Use TRUE for jsbach_lite, FALSE for jsbach_pfts
  bc_filename          = 'bc_land_phys.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_turb_nml
  bc_filename          = 'bc_land_phys.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_sse_nml
  l_heat_cap_map       = .FALSE.
  l_heat_cond_map      = .FALSE.
  l_heat_cap_dyn       = .FALSE.
  l_heat_cond_dyn      = .FALSE.
  l_snow               = .TRUE.
  l_dynsnow            = .TRUE.
  l_freeze             = .TRUE.
  l_supercool          = .TRUE.
  bc_filename          = 'bc_land_soil.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_hydro_nml
  l_organic            = .FALSE.
  bc_filename          = 'bc_land_soil.nc'
  ic_filename          = 'ic_land_soil.nc'
  bc_sso_filename      = 'bc_land_sso.nc'
/
&jsb_assimi_nml
  active               = .TRUE.              ! Use FALSE for jsbach_lite, TRUE for jsbach_pfts
/
&jsb_pheno_nml
  scheme               = 'logrop'            ! scheme = logrop / climatology; use climatology for jsbach_lite
  bc_filename          = 'bc_land_phys.nc'
  ic_filename          = 'ic_land_soil.nc'
/
&jsb_carbon_nml
  active               = ${lcarbon}
  bc_filename          = 'bc_land_carbon.nc'
  ic_filename          = 'ic_land_carbon.nc'
  read_cpools          = .FALSE.
/
&jsb_fuel_nml
  active               = ${lcarbon}
  fuel_algorithm       = 1
/
&jsb_disturb_nml
  active               = .FALSE.
  ic_filename          = 'ic_land_soil.nc'
  bc_filename          = 'bc_land_phys.nc'
  fire_algorithm       = 1
  windbreak_algorithm  = 1
  lburn_pasture        = .FALSE.
/
EOF

#--------------------------------------------------------------------------------------------------

# Define the atmosphere and land input
# ------------------------------------

# model files
#
add_link_file ${basedir}/data/lsdata.nc                                 ./
add_link_file ${basedir}/data/ECHAM6_CldOptProps.nc                     ./

# namelist files
# --------------
add_required_file ${basedir}/run/${atm_namelist}                        ./
add_required_file ${basedir}/run/${jsbach_namelist}                        ./

# dictionary file for output variable names
#
dict_file="dict.${EXPNAME}"
cat dict.iconam.mpim  > ${dict_file}
add_required_file ${basedir}/run/${dict_file}                           ./

# initial conditions
#
# - atmosphere: ECMWF analysis, 1979-01-01T00:00:00Z
datadir=${atmo_data_InputFolder}/initial_condition/r0001
add_link_file ${datadir}/ifs2icon_1979010100_${atmos_refinement}_G.nc   ./ifs2icon.nc
#
# - land: source?, date+time?
datadir=${atmo_data_InputFolder}/land/r0001
add_link_file ${datadir}/ic_land_soil_1976.nc                           ./ic_land_soil.nc

# boundary conditions
#
# - well mixed greenhouse gases
#
#
# range of years for yearly files
# assume start_date and end_date have the format yyyy-...
#
start_year=$(( ${start_date%%-*} - 1 ))
end_year=$(( ${end_date%%-*} + 1 ))
#
datadir=${icon_data_poolFolder}/independent/greenhouse_gases                             
add_link_file ${datadir}/greenhouse_historical_plus.nc                  ./bc_greenhouse_gases.nc  

# - ozone
# -- for irad_o3=8
#
datadir=${icon_data_poolFolder}/${atmos_gridID}/ozone/r0001
add_link_file ${datadir}/bc_ozone_picontrol.nc                          ./bc_ozone.nc

#
year=$start_year
while [[ $year -le $end_year ]]
do
  if [[ $year -le 2014 ]]
  then
    add_link_file ${datadir}/bc_ozone_historical_${year}.nc             ./bc_ozone_${year}.nc
  else
    add_link_file ${datadir}/bc_ozone_historical_2014.nc                ./bc_ozone_${year}.nc
  fi
  (( year = year+1 ))
done
#
# -- for irad_o3=1 with Cariolle ozone chemistry                                         
#                                                                                        
datadir=${icon_data_poolFolder}/independent/greenhouse_gases                             
add_link_file ${datadir}/bc_ozone_cariolle.nc                           ./cariolle_coeff.
#                  
# - tropospheric anthropogenic aerosols, simple plumes
#
datadir=${icon_data_poolFolder}/independent/MACv2_simple_plumes_merged
#
add_link_file ${datadir}/MACv2.0-SP-merged-historical-and-SSP2-45_v1.nc ./MACv2.0-SP_v1.nc
#
#   Kinne background aerosols are needed for the year 1850 (irad_aero=18)
#
#   Here we use revised data (r0002) based on work by Sebastian Rast
#
datadir=${icon_data_poolFolder}/${atmos_gridID}/aerosol_kinne/r0001
#
add_link_file ${datadir}/bc_aeropt_kinne_lw_b16_coa.nc                  ./
add_link_file ${datadir}/bc_aeropt_kinne_sw_b14_coa.nc                  ./
add_link_file ${datadir}/bc_aeropt_kinne_sw_b14_fin_1850.nc             ./bc_aeropt_kinne_sw_b14_fin.nc
#
# - stratospheric aerosol (CMIP6)
datadir=${icon_data_poolFolder}/independent/CMIP6Forcing
#
if [ ! -d $datadir ]; then
  echo 'directory '$datadir' for stratospheric aerosol data does not exist'
  exit -1
fi	
year=$start_year
while [[ $year -le $end_year ]]
do
  if [[ $year -le 2014 ]]
  then
    add_link_file $datadir/bc_aeropt_cmip6_volc_lw_b16_sw_b14_${year}.nc  ./bc_aeropt_cmip6_volc_lw_b16_sw_b14_${year}.nc
  else
    add_link_file $datadir/bc_aeropt_cmip6_volc_lw_b16_sw_b14_2014.nc     ./bc_aeropt_cmip6_volc_lw_b16_sw_b14_${year}.nc
  fi
  (( year = year+1 ))
done
#
# - sst and sic
#
datadir=${atmo_data_InputFolder}/sst_and_seaice/r0001
#
add_link_file ${datadir}/bc_sic_1979_2016.nc                               ./bc_sic.nc
add_link_file ${datadir}/bc_sst_1979_2016.nc                               ./bc_sst.nc
#
# - ssi and tsi
#
datadir=${icon_data_poolFolder}/independent/solar_radiation/3.2
#
add_link_file ${datadir}/swflux_14band_cmip6_1850-2299-v3.2.nc             ./bc_solar_irradiance_sw_b14.nc
#
# - land parameters
#
datadir=${atmo_data_InputFolder}/land/r0001
#
add_link_file ${datadir}/bc_land_frac_${pft_file_tag}1976.nc               ./bc_land_frac.nc
add_link_file ${datadir}/bc_land_phys_1976.nc                              ./bc_land_phys.nc
add_link_file ${datadir}/bc_land_soil_1976.nc                              ./bc_land_soil.nc
add_link_file ${datadir}/bc_land_sso_1976.nc                               ./bc_land_sso.nc
#
# - lctlib file for JSBACH
#
add_link_file ${basedir}/externals/jsbach/data/lctlib_nlct21.def           ./lctlib_nlct21.def
#
# - HD mask for interpolation of runoff 
#
add_required_file ${atmo_grid_folder}/${atmo_dyn_grid}                     hd_mask.nc
#
# - the atmosphere grid itself (the grid copy section below from $HGRIDDIR is ignored)
#
add_required_file ${atmo_grid_folder}/${atmo_dyn_grid}                     ./
#
#--------------------------------------------------------------------------------------------------

# (5) Define the output
# ---------------------

# Parameters for all output files
# -------------------------------
cat >> ${atm_namelist} << EOF
&io_nml
output_nml_dict    = "${dict_file}"                                                     
netcdf_dict        = "${dict_file}"                                                     
write_last_restart = .TRUE.                                                             
itype_pres_msl     = 4                                                               
restart_file_type  = 5 
/
EOF

# Define output files
# -------------------
#
# output_<xyz>=yes : yes --> output files for <xyz>, any other value --> no files for <xyz>
#
# 3-dimensional files include 'ps' and 'pfull' to allow the vertical
# interpolation to pressure levels by cdo ap2pl.
#
if [[ "$output_atm_vgrid" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_vgrid"
 filename_format  = "<output_filename>_<levtype_l>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"           ! output_start = output_end
 output_end       = "${start_date}"           ! --> write once only irrespective of
 output_interval  = "${atm_output_interval}"  !     the output interval and
 file_interval    = "${atm_file_interval}"    !     the file interval
 ml_varlist       = 'zghalf'  , 'zg'      , 'dzghalf'
/
EOF
fi
#
# Standard AMIP output...
#
#
if [[ "$output_atm_3d" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'zg'      ,
                    'ps'      , 'pfull'   ,
                    'rho'     , 'ta'      ,
                    'ua'      , 'va'      , 'wap'     ,
                    'hus'     , 'clw'     , 'cli'     ,
                    'hur'     , 'cl'      ,
/
EOF
fi


if [[ "$output_atm_2d" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_2d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'orog'    ,
                    'ps'      , 'psl'     ,
                    'cosmu0'  ,
                    'rsdt'    ,
                    'rsut'    , 'rsutcs'  , 'rlut'    , 'rlutcs'  ,
                    'rsds'    , 'rsdscs'  , 'rlds'    , 'rldscs'  ,
                    'rsus'    , 'rsuscs'  , 'rlus'    ,
                    'ts'      ,
                    'sic'     , 'sit'     ,
                    'albedo'  ,
                    'clt'     ,
                    'prlr'    , 'prls'    , 'prcr'    , 'prcs'    ,
                    'pr'      , 'prw'     , 'cllvi'   , 'clivi'   ,
                    'hfls'    , 'hfss'    , 'evspsbl' ,
                    'tauu'    , 'tauv'    ,
                    'tauu_sso', 'tauv_sso', 'diss_sso',
                    'sfcwind' , 'uas'     , 'vas'     ,
                    'tas'     , 'dew2'    ,
                    'ptp'
/
EOF
fi


if [[ "$output_phy_3d" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_phy_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'           , 'pfull'        ,
                    'tend_ta'      , 'tend_ta_dyn'  , 'tend_ta_phy'  ,
                    'tend_ta_vdf'  , 'tend_ta_gwd'  , 'tend_ta_sso'  ,
                    'tend_ta_cnv'  , 'tend_ta_cld'  , 
                    'tend_ua'      , 'tend_ua_dyn'  , 'tend_ua_phy'  ,
                    'tend_ua_vdf'  , 'tend_ua_gwd'  , 'tend_ua_sso'  ,
                    'tend_ua_cnv'  ,
                    'tend_va'      , 'tend_va_dyn'  , 'tend_va_phy'  ,
                    'tend_va_vdf'  , 'tend_va_gwd'  , 'tend_va_sso'  ,
                    'tend_va_cnv'  ,
                    'tend_qhus'    , 'tend_qhus_dyn', 'tend_qhus_phy',
                    'tend_qhus_cld', 'tend_qhus_cnv', 'tend_qhus_vdf'
/
EOF
fi


# minimal jsbach output for running atm_amip experiment
# for more jsbach output see exp.atm_amip_les
#
if [[ "$output_lnd" == "yes" ]]; then
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_lnd"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'pheno_lai_box'         , 'pheno_fract_fpc_veg'         , 'hydro_fract_water_box' ,
                    'hydro_fract_snow_box'  , 'hydro_w_skin_box'            , 'hydro_w_snow_box'      ,
                    'hydro_w_soil_column_box'
/
EOF
fi
#!/bin/ksh
#=============================================================================
#
# This section of the run script prepares and starts the model integration. 
#
# MODEL and START must be defined as environment variables or
# they must be substituted with appropriate values.
#
# Marco Giorgetta, MPI-M, 2010-04-21
#
#-----------------------------------------------------------------------------
final_status_file=${basedir}/run/${job_name}.final_status
rm -f ${final_status_file}
#-----------------------------------------------------------------------------
#
# directories definition
#
RUNSCRIPTDIR=${basedir}/run
if [ x$grids_folder = x ] ; then
   HGRIDDIR=${basedir}/grids
else
   HGRIDDIR=$grids_folder
fi

# experiment directory, with plenty of space, create if new
EXPDIR=${basedir}/experiments/${EXPNAME}
if [ ! -d ${EXPDIR} ] ;  then
  mkdir -p ${EXPDIR}
fi
#
ls -ld ${EXPDIR}
if [ ! -d ${EXPDIR} ] ;  then
    mkdir ${EXPDIR}
#else
#   rm -rf ${EXPDIR}
#   mkdir  ${EXPDIR}
fi
ls -ld ${EXPDIR}
check_error $? "${EXPDIR} does not exist?"

cd ${EXPDIR}

#-----------------------------------------------------------------------------
final_status_file=${RUNSCRIPTDIR}/${job_name}.final_status
rm -f ${final_status_file}

#-----------------------------------------------------------------------------
# set up the model lists if they do not exist
# this works for single model runs
# for coupled runs the lists should be declared explicilty
if [ x$namelist_list = x ]; then
#  minrank_list=(        0           )
#  maxrank_list=(     65535          )
#  incrank_list=(        1           )
  minrank_list[0]=0
  maxrank_list[0]=65535
  incrank_list[0]=1
  if [ x$atmo_namelist != x ]; then
    # this is the atmo model
    namelist_list[0]="$atmo_namelist"
    modelname_list[0]="atmo"
    modeltype_list[0]=1
    run_atmo="true"
  elif [ x$ocean_namelist != x ]; then
    # this is the ocean model
    namelist_list[0]="$ocean_namelist"
    modelname_list[0]="oce"
    modeltype_list[0]=2
  elif [ x$psrad_namelist != x ]; then
    # this is the psrad model
    namelist_list[0]="$psrad_namelist"
    modelname_list[0]="psrad"
    modeltype_list[0]=3
  elif [ x$hamocc_namelist != x ]; then
    # this is the hamocc model
    namelist_list[0]="$hamocc_namelist"
    modelname_list[0]="hamocc"
    modeltype_list[0]=4
  elif [ x$jsbach_namelist != x ]; then
    # this is the jsbach standalone model
    namelist_list[0]="$jsbach_namelist"
    modelname_list[0]="jsbach"
    modeltype_list[0]=5
    run_jsbach_standalone="true"
  elif [ x$testbed_namelist != x ]; then
    # this is the testbed model
    namelist_list[0]="$testbed_namelist"
    modelname_list[0]="testbed"
    modeltype_list[0]=99
  else
    check_error 1 "No namelist is defined"
  fi 
fi

#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# set some default values and derive some run parameteres
restart=${restart:=".false."}
restartSemaphoreFilename='isRestartRun.sem'
#AUTOMATIC_RESTART_SETUP:
if [ -f ${restartSemaphoreFilename} ]; then
  restart=.true.
  #  do not delete switch-file, to enable restart after unintended abort
  #[[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi
#END AUTOMATIC_RESTART_SETUP
#
# wait 5min to let GPFS finish the write operations
if [ "x$restart" != 'x.false.' -a "x$submit" != 'x' ]; then
  if [ x$(df -T ${EXPDIR} | cut -d ' ' -f 2) = gpfs ]; then
    sleep 10;
  fi
fi
# fill some checks

run_atmo=${run_atmo="false"}
if [ x$atmo_namelist != x ]; then
  run_atmo="true"
  run_jsbach_standalone="false"
fi
run_jsbach=${run_jsbach="false"}
if [ x$jsbach_namelist != x ]; then
  run_jsbach="true"
fi
run_ocean=${run_ocean="false"}
if [ x$ocean_namelist != x ]; then
  run_ocean="true"
fi
run_psrad=${run_psrad="false"}
if [ x$psrad_namelist != x ]; then
  run_psrad="true"
fi
run_hamocc=${run_hamocc="false"}
if [ x$hamocc_namelist != x ]; then
  run_hamocc="true"
fi

#-----------------------------------------------------------------------------
# add grids to required files
all_grids="${atmo_dyn_grids} ${atmo_rad_grids} ${ocean_grids}"
for gridfile in ${all_grids}; do
  #
  gridfile=${gridfile//\'/} # strip all ' in case ' is used to delimit the grid names
  gridfile=${gridfile//\"/} # strip all " in case " is used to delimit the grid names
  gridfile=${gridfile//\,/} # strip all , in case , is used to separate the grid names
  #
  grfinfofile=${gridfile%.nc}-grfinfo.nc
  #
  ls -l ${HGRIDDIR}/$gridfile
  check_error $? "${HGRIDDIR}/$gridfile does not exist."
  add_link_file ${HGRIDDIR}/${gridfile} ./
  if [ -f ${HGRIDDIR}/${grfinfofile} ]; then    
    add_link_file ${HGRIDDIR}/${grfinfofile} ./
  fi
done
#-----------------------------------------------------------------------------
# print_required_files
copy_required_files
link_required_files


#-----------------------------------------------------------------------------
# get restart files

if  [ x$restart_atmo_from != "x" ] ; then
  rm -f restart_atm_DOM01.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} ${EXPDIR}/restart_atm_DOM01.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_atmo_from} cp_restart_atm.nc
  ln -s cp_restart_atm.nc restart_atm_DOM01.nc
  restart=".true."
fi
if  [ x$restart_ocean_from != "x" ] ; then
  rm -f restart_oce.nc
#  ln -s ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} ${EXPDIR}/restart_oce.nc
  cp ${basedir}/experiments/${restart_from_folder}/${restart_ocean_from} cp_restart_oce_DOM01.nc
  ln -s cp_restart_oce_DOM01.nc restart_oce_DOM01.nc
  restart=".true."
fi
#-----------------------------------------------------------------------------


read_restart_namelists=${read_restart_namelists:=".true."}

#-----------------------------------------------------------------------------
#
# create ICON master namelist
# ------------------------
# For a complete list see Namelist_overview and Namelist_overview.pdf

#-----------------------------------------------------------------------------
# create master_namelist
if [ x${dont_create_icon_master_namelist+set} != xset ]; then
master_namelist=icon_master.namelist
if [ x$end_date = x ]; then
cat > $master_namelist << EOF
&master_nml
 lrestart            = $restart
/
&master_time_control_nml
 experimentStartDate  = "$start_date" 
 restartTimeIntval    = "$restart_interval" 
 checkpointTimeIntval = "$checkpoint_interval" 
/
&time_nml
 is_relative_time = .false.
/
EOF
else
if [ "x$calendar" = "x" ]; then
  calendar='proleptic gregorian'
  calendar_type=1
else
  calendar=$calendar
  calendar_type=$calendar_type
fi
cat > $master_namelist << EOF
&master_nml
 lrestart            = $restart
 read_restart_namelists = $read_restart_namelists
/
&master_time_control_nml
 calendar             = "$calendar"
 checkpointTimeIntval = "$checkpoint_interval" 
 restartTimeIntval    = "$restart_interval" 
 experimentStartDate  = "$start_date" 
 experimentStopDate   = "$end_date" 
/
&time_nml
 is_relative_time = .false.
/
EOF
fi
fi # x${dont_create_icon_master_namelist+set} != xset
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
# add model component to master_namelist
add_component_to_master_namelist()
{
  model_namelist_filename=$1
  if [ x${dont_create_icon_master_namelist+set} != xset ]; then
    model_name=$2
    model_type=$3
    model_min_rank=$4
    model_max_rank=$5
    model_inc_rank=$6
    cat >> $master_namelist << EOF
&master_model_nml
  model_name="$model_name"
  model_namelist_filename="$model_namelist_filename"
  model_type=$model_type
  model_min_rank=$model_min_rank
  model_max_rank=$model_max_rank
  model_inc_rank=$model_inc_rank
/
EOF
  fi

#-----------
#get namelist
  if [ -f ${RUNSCRIPTDIR}/$model_namelist_filename ] ; then
    mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}
    check_error $? "mv -f ${RUNSCRIPTDIR}/$model_namelist_filename ${EXPDIR}"
  else
    check_error 1 "${RUNSCRIPTDIR}/$model_namelist_filename does not exist"
  fi
}
#-----------------------------------------------------------------------------


no_of_models=${#namelist_list[*]}
echo "no_of_models=$no_of_models"

j=0
while [ $j -lt ${no_of_models} ]
do
  add_component_to_master_namelist "${namelist_list[$j]}" "${modelname_list[$j]}" ${modeltype_list[$j]} ${minrank_list[$j]} ${maxrank_list[$j]} ${incrank_list[$j]}
  j=`expr ${j} + 1`
done

#-----------------------------------------------------------------------------
# Add JSBACH part to master_namelist
# For several domains, $jsbach_namelist is only the basename for each domain's jsbach namelist;
#   the actual namelist files are appended by suffixes '_d1', '_d2', etc.

if [[ $run_jsbach == @(yes|true) ]]; then
  cat >> $master_namelist << EOF
&jsb_control_nml
 is_standalone      = .${run_jsbach_standalone:=false}.
 restart_jsbach     = ${restart}
 debug_level        = 0
 timer_level        = 0
EOF
if [[ ${run_jsbach_standalone} == true ]]; then
  cat >> $master_namelist << EOF
 l_force_from_obs   = .${l_force_from_obs:-false}.
EOF
fi
  cat >> $master_namelist << EOF
/
EOF
#
if [[ -n ${atmo_dyn_grids} ]]; then
  set -A gridfiles $atmo_dyn_grids
  no_of_domains=${#gridfiles[*]}
else
  no_of_domains=1
fi
echo "no_of_domains=$no_of_domains"
domain=""
domain_suffix=""
j=1
while [ $j -le ${no_of_domains} ]
do
  if [[ $no_of_domains -gt 1 ]]; then
    # no_of_domains < 10 !
    domain=" DOM0${j}"
    domain_suffix="_d${j}"
  fi
  cat >> $master_namelist << EOF
&jsb_model_nml
 model_id = $j
 model_name = "JSBACH${domain}"
 model_shortname = "jsb${domain_suffix}"
 model_description = 'JSBACH land surface model'
 model_namelist_filename = "${jsbach_namelist}${domain_suffix}"
/
EOF
  if [[ ${run_jsbach_standalone} != true ]]; then
    if [[ -f ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} ]] ; then
      mv ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} ${EXPDIR}
      check_error $? "mv ${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix}"
    else
      check_error 1 "${RUNSCRIPTDIR}/${jsbach_namelist}${domain_suffix} does not exist"
    fi
  fi
  j=`expr ${j} + 1`
done
fi
#
#  get model
#
ls -l ${MODEL}
check_error $? "${MODEL} does not exist?"
#
ldd -v ${MODEL}
#
#-----------------------------------------------------------------------------
#
# start experiment
#

rm -f finish.status
#
date
${START} ${MODEL} # > out.txt 2>&1
date
#
if [ -r finish.status ] ; then
  check_final_status 0 "${START} ${MODEL}"
else
  check_final_status -1 "${START} ${MODEL}"
fi
#
#-----------------------------------------------------------------------------
#
finish_status=`cat finish.status`
echo $finish_status
echo "============================"
echo "Script run successfully: $finish_status"
echo "============================"

#-----------------------------------------------------------------------------
# rm output_schedule_steps*
#-----------------------------------------------------------------------------
if [[ "x$use_hamocc" = "xyes" ]]; then
# store HAMOCC log file
strg="$(ls -rt ${EXPNAME}_hamocc_EU*.nc* | tail -1 )"
prefx="${EXPNAME}_hamocc_EU_tendencies"
foo=${strg##${prefx}}
foo=${foo%%.*}
bgcout_file="bgcout_${foo}"
mv bgcout $bgcout_file
fi
#-----------------------------------------------------------------------------
namelist_list=""
#-----------------------------------------------------------------------------
# check if we have to restart, ie resubmit
#   Note: this is a different mechanism from checking the restart
if [ $finish_status = "RESTART" ] ; then
  echo "restart next experiment..."
  this_script="${RUNSCRIPTDIR}/${job_name}"
  echo 'this_script: ' "$this_script"
  touch ${restartSemaphoreFilename}
  cd ${RUNSCRIPTDIR}
  ${submit} $this_script $run_param_0
else
  [[ -f ${restartSemaphoreFilename} ]] && rm ${restartSemaphoreFilename}
fi

#-----------------------------------------------------------------------------
# automatic call/submission of post processing if available
if [ "x${autoPostProcessing}" = "xtrue" ]; then
  # check if there is a postprocessing is available
  cd ${RUNSCRIPTDIR}
  targetPostProcessingScript="./post.${EXPNAME}.run"
  [[ -x $targetPostProcessingScript ]] && ${submit} ${targetPostProcessingScript}
  cd -
fi

#-----------------------------------------------------------------------------

cd $RUNSCRIPTDIR

#-----------------------------------------------------------------------------

	
# exit 0
#
# vim:ft=sh
#-----------------------------------------------------------------------------
